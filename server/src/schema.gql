# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Query {
  hello: String!
  posts(skip: Int = 0, take: Int = 20): PaginatedPosts!
  post(id: ID!): Post
  users(user: UserSearchArgs, skip: Int = 0, take: Int = 20): PaginatedUser
  user(id: String!): User
  currentUser: User
}

type PaginatedPosts {
  items: [Post!]!
  total: Int
  hasMore: Boolean
}

type Post {
  _id: ID!
  id: ID!
  title: String!
  text: String!
  creator: User!
  likedBy: [User!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  contentSnippet: String!
  comments(skip: Int = 0, take: Int = 20): PaginatedComments!
}

type User {
  name: String
  surname: String
  avatar: String
  city: String
  birth: DateTime
  position: String
  education: String
  cell: String
  skype: String
  department: String
  description: String
  skills: [String!]
  _id: ID!
  id: ID!
  email: String!
  friends: [User!]!
  roles: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  posts(post: PostSearchArgs, skip: Int = 0, take: Int = 20): PaginatedPosts!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

input PostSearchArgs {
  title: String
}

type PaginatedComments {
  items: [Comment!]!
  total: Int
  hasMore: Boolean
}

type Comment {
  _id: ID!
  id: ID!
  text: String!
  post: Post!
  author: User!
  likedBy: [User!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  contentSnippet: String!
}

type PaginatedUser {
  items: [User!]!
  total: Int
  hasMore: Boolean
}

input UserSearchArgs {
  name: String
  surname: String
  avatar: String
  city: String
  birth: DateTime
  position: String
  education: String
  cell: String
  skype: String
  department: String
  description: String
  skills: [String!]
  email: String!
}

type Mutation {
  createComment(text: String!, post: String!): Comment!
  likePost(id: ID!): Post!
  dislikePost(id: ID!): Post!
  createPost(title: String!, text: String!): Post!
  updatePost(text: String!, title: String!, id: Int!): Post
  deletePost(id: ID!): Post!
  changePassword(newPassword: String!, oldPassword: String!): User!
  updateUserProfile(name: String, surname: String, avatar: String, city: String, birth: DateTime, position: String, education: String, cell: String, skype: String, department: String, description: String, skills: [String!]): User!
  makeFriend(id: ID!): User!
  register(email: String!, password: String!): AuthorizedUser!
  login(password: String!, email: String!): AuthorizedUser!
  logout: Boolean!
  deletePage: Boolean!
}

type AuthorizedUser {
  token: String!
  user: User!
}
